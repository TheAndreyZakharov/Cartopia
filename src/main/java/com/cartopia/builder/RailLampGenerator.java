package com.cartopia.builder;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import net.minecraft.core.BlockPos;
import net.minecraft.network.chat.Component;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.SlabBlock;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.properties.SlabType;
import net.minecraft.resources.ResourceLocation;
import net.minecraftforge.registries.ForgeRegistries;

import java.util.*;

public class RailLampGenerator {

    private final ServerLevel level;
    private final JsonObject coords;

    private static final int RAIL_LAMP_PERIOD = 100;  // 1-–≤-1 –∫–∞–∫ —É —Ç–µ–±—è
    private static final int RAIL_LAMP_COLUMN_WALLS = 5;

    private static final class Counter { int v = 0; }

    public RailLampGenerator(ServerLevel level, JsonObject coords) {
        this.level = level;
        this.coords = coords;
    }

    private static void broadcast(ServerLevel level, String msg) {
        try {
            if (level.getServer() != null) {
                for (ServerPlayer p : level.getServer().getPlayerList().getPlayers()) {
                    p.sendSystemMessage(Component.literal("[Cartopia] " + msg));
                }
            }
        } catch (Throwable ignore) {}
        System.out.println("[Cartopia] " + msg);
    }

    public void generate() {
        broadcast(level, "üí° –†–∞—Å—Å—Ç–∞–≤–ª—è—é —Ñ–æ–Ω–∞—Ä–∏ –≤–¥–æ–ª—å –∂–µ–ª–µ–∑–Ω—ã—Ö –¥–æ—Ä–æ–≥‚Ä¶");

        if (coords == null || !coords.has("features")) {
            broadcast(level, "–í coords –Ω–µ—Ç features ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é RailLampGenerator.");
            return;
        }

        // –ì–µ–æ–ø—Ä–∏–≤—è–∑–∫–∞ –∏ –≥—Ä–∞–Ω–∏—Ü—ã
        JsonObject center = coords.getAsJsonObject("center");
        JsonObject bbox   = coords.getAsJsonObject("bbox");

        final double centerLat = center.get("lat").getAsDouble();
        final double centerLng = center.get("lng").getAsDouble();
        final int    sizeMeters = coords.get("sizeMeters").getAsInt();

        final double south = bbox.get("south").getAsDouble();
        final double north = bbox.get("north").getAsDouble();
        final double west  = bbox.get("west").getAsDouble();
        final double east  = bbox.get("east").getAsDouble();

        final int centerX = coords.has("player")
                ? (int)Math.round(coords.getAsJsonObject("player").get("x").getAsDouble())
                : 0;
        final int centerZ = coords.has("player")
                ? (int)Math.round(coords.getAsJsonObject("player").get("z").getAsDouble())
                : 0;

        int[] a = latlngToBlock(south, west, centerLat, centerLng, east, west, north, south, sizeMeters, centerX, centerZ);
        int[] b = latlngToBlock(north, east, centerLat, centerLng, east, west, north, south, sizeMeters, centerX, centerZ);
        final int minX = Math.min(a[0], b[0]);
        final int maxX = Math.max(a[0], b[0]);
        final int minZ = Math.min(a[1], b[1]);
        final int maxZ = Math.max(a[1], b[1]);

        JsonArray elements = coords.getAsJsonObject("features").getAsJsonArray("elements");
        if (elements == null || elements.size() == 0) {
            broadcast(level, "OSM elements –ø—É—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —Ñ–æ–Ω–∞—Ä–∏ –Ω–∞ —Ä–µ–ª—å—Å–∞—Ö.");
            return;
        }

        int totalRails = 0;
        for (JsonElement el : elements) {
            JsonObject e = el.getAsJsonObject();
            JsonObject tags = e.has("tags") && e.get("tags").isJsonObject() ? e.getAsJsonObject("tags") : null;
            if (tags == null) continue;
            if (!isRailCandidate(tags)) continue;
            if (!"way".equals(optString(e,"type"))) continue;
            if (!e.has("geometry") || !e.get("geometry").isJsonArray()) continue;
            if (e.getAsJsonArray("geometry").size() < 2) continue;
            totalRails++;
        }

        int processed = 0;
        for (JsonElement el : elements) {
            JsonObject e = el.getAsJsonObject();
            JsonObject tags = e.has("tags") && e.get("tags").isJsonObject() ? e.getAsJsonObject("tags") : null;
            if (tags == null) continue;
            if (!isRailCandidate(tags)) continue;
            if (!"way".equals(optString(e,"type"))) continue;

            JsonArray geom = e.getAsJsonArray("geometry");
            if (geom == null || geom.size() < 2) continue;

            String type = optString(tags, "railway");
            boolean isSubway = "subway".equals(type);

            // –§–æ–Ω–∞—Ä–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è surface-—Ä–µ–ª—å—Å (–Ω–µ –º–µ—Ç—Ä–æ –∏ –Ω–µ –º–æ—Å—Ç—ã/—Ç–æ–Ω–Ω–µ–ª–∏)
            if (!isSubway && (isElevatedLike(tags) || isUndergroundLike(tags))) {
                processed++;
                continue;
            }
            if (isSubway) {
                // –¥–ª—è –º–µ—Ç—Ä–æ —Ñ–æ–Ω–∞—Ä–∏ –≤ —ç—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –Ω–µ —Å—Ç–∞–≤–∏–º (–∫–∞–∫ –∏ –±—ã–ª–æ)
                processed++;
                continue;
            }

            // –ò–¥—ë–º –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
            Integer yHintTop = null;
            int prevX = Integer.MIN_VALUE, prevZ = Integer.MIN_VALUE;
            Counter lamp = new Counter();

            for (int i=0; i<geom.size(); i++) {
                JsonObject p = geom.get(i).getAsJsonObject();
                double lat = p.get("lat").getAsDouble();
                double lon = p.get("lon").getAsDouble();
                int[] xz = latlngToBlock(lat, lon, centerLat, centerLng, east, west, north, south, sizeMeters, centerX, centerZ);
                int x = xz[0], z = xz[1];

                if (prevX != Integer.MIN_VALUE) {
                    placeLampsAlongSurfaceRailSegment(prevX, prevZ, x, z,
                            minX, maxX, minZ, maxZ, yHintTop, lamp);
                }

                // –æ–±–Ω–æ–≤–ª—è–µ–º hint –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Ä—è–¥–æ–º —Å –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–æ–π –æ—Ç—Ä–µ–∑–∫–∞
                yHintTop = findTopNonAirNearSkippingRails(x, z, yHintTop);
                prevX = x; prevZ = z;
            }

            processed++;
            if (totalRails > 0 && processed % Math.max(1, totalRails/10) == 0) {
                int pct = (int)Math.round(100.0 * processed / Math.max(1,totalRails));
                broadcast(level, "–§–æ–Ω–∞—Ä–∏ –Ω–∞ —Ä–µ–ª—å—Å–∞—Ö: ~" + pct + "%");
            }
        }

        broadcast(level, "–§–æ–Ω–∞—Ä–∏ –≤–¥–æ–ª—å –∂–µ–ª–µ–∑–Ω—ã—Ö –¥–æ—Ä–æ–≥ –≥–æ—Ç–æ–≤—ã.");
    }

    // === –õ–û–ì–ò–ö–ê –î–õ–Ø –õ–ò–ù–ò–ô ===

    private void placeLampsAlongSurfaceRailSegment(int x1, int z1, int x2, int z2,
                                                   int minX, int maxX, int minZ, int maxZ,
                                                   Integer yHintTop,
                                                   Counter lamp) {
        List<int[]> line = bresenhamLine(x1, z1, x2, z2);
        final int worldMin = level.getMinBuildHeight();
        final int worldMax = level.getMaxBuildHeight() - 1;

        boolean horizontalMajor = Math.abs(x2 - x1) >= Math.abs(z2 - z1);
        int dirX = Integer.signum(x2 - x1);
        int dirZ = Integer.signum(z2 - z1);
        // —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ 1 –±–ª–æ–∫ –≤–ª–µ–≤–æ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è (–∫–∞–∫ –±—ã–ª–æ)
        final int offX = horizontalMajor ? 0      : -dirZ;
        final int offZ = horizontalMajor ? dirX   : 0;

        for (int[] pt : line) {
            int x = pt[0], z = pt[1];
            if (x < minX || x > maxX || z < minZ || z > maxZ) continue;

            // –±–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–π y —Ä–µ–ª—å–µ—Ñ–∞ (–∫–∞–∫ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –ø—É—Ç–µ–π)
            int yBase = terrainYFromCoordsOrWorld(x, z, yHintTop);
            if (yBase < worldMin || yBase + 1 > worldMax) {
                lamp.v++;
                continue;
            }

            if (lamp.v % RAIL_LAMP_PERIOD == 0) {
                int lx = x + offX;
                int lz = z + offZ;
                int toward = horizontalMajor ? -offZ : -offX; // –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –∫—Ä–∞—è –∫ —Ü–µ–Ω—Ç—Ä—É –ø—É—Ç–∏
                placeRailLamp(lx, lz, yBase, horizontalMajor, toward, minX, maxX, minZ, maxZ);
            }
            lamp.v++;

            yHintTop = yBase;
        }
    }

    // === –ü–û–°–¢–ê–ù–û–í–ö–ê –§–û–ù–ê–†–Ø (1-–≤-1 –∫–∞–∫ –≤ —Ç–≤–æ—ë–º RailGenerator) ===

    // –ù–ï –°–¢–ê–í–ò–¢–¨ –§–û–ù–ê–†–ò –Ω–∞ –¥–æ—Ä–æ–∂–Ω—ã–π —Å–µ—Ä—ã–π/–±–µ–ª—ã–π/–∂—ë–ª—Ç—ã–π –±–µ—Ç–æ–Ω
    private static boolean isGrayConcrete(Block b) {
        ResourceLocation key = ForgeRegistries.BLOCKS.getKey(b);
        if (key == null) return false;
        String id = key.toString();
        return "minecraft:gray_concrete".equals(id)
            || "minecraft:white_concrete".equals(id)
            || "minecraft:yellow_concrete".equals(id);
    }

    private void placeRailLamp(int edgeX, int edgeZ, int yBase,
                               boolean horizontalMajor, int towardCenterSign,
                               int minX, int maxX, int minZ, int maxZ) {
        if (edgeX < minX || edgeX > maxX || edgeZ < minZ || edgeZ > maxZ) return;

        final int worldMin = level.getMinBuildHeight();
        final int worldMax = level.getMaxBuildHeight() - 1;

        // –ë–µ—Ä—ë–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª—å–µ—Ñ –≤ —Ç–æ—á–∫–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å—Ç–∞–≤–∏–º –∫–æ–ª–æ–Ω–Ω—É "–Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å" (ySurf+1)
        int ySurfEdge = findTopNonAirNearSkippingRails(edgeX, edgeZ, null);
        if (ySurfEdge == Integer.MIN_VALUE) return;

        // –ù–ï —Å—Ç–∞–≤–∏–º —Ñ–æ–Ω–∞—Ä—å, –µ—Å–ª–∏ –≤–µ—Ä—Ö–Ω–∏–π –Ω–µ-air –±–ª–æ–∫ ‚Äî —Å–µ—Ä—ã–π/–±–µ–ª—ã–π/–∂—ë–ª—Ç—ã–π –±–µ—Ç–æ–Ω –¥–æ—Ä–æ–≥–∏
        Block under = level.getBlockState(new BlockPos(edgeX, ySurfEdge, edgeZ)).getBlock();
        if (isGrayConcrete(under)) return;

        int y0   = ySurfEdge + 1;                                   // –±–∞–∑–∞ –∫–æ–ª–æ–Ω–Ω—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ ¬´–∫–∞–∫ —Ä–µ–ª—å—Å—ã¬ª
        int yTop = Math.min(y0 + RAIL_LAMP_COLUMN_WALLS - 1, worldMax);

        // 1) –ö–æ–ª–æ–Ω–Ω–∞ –∏–∑ —Å—Ç–µ–Ω
        for (int y = y0; y <= yTop; y++) {
            level.setBlock(new BlockPos(edgeX, y, edgeZ), Blocks.ANDESITE_WALL.defaultBlockState(), 3);
        }

        // 2) –î–í–ê –Ω–∏–∂–Ω–∏—Ö –ø–æ–ª—É–±–ª–æ–∫–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫ —Ü–µ–Ω—Ç—Ä—É –ø—É—Ç–∏
        int ySlab = yTop + 1;
        if (ySlab > worldMax) return;

        int sx = horizontalMajor ? 0 : towardCenterSign;
        int sz = horizontalMajor ? towardCenterSign : 0;

        placeBottomSlab(edgeX,          ySlab, edgeZ,          Blocks.SMOOTH_STONE_SLAB);
        placeBottomSlab(edgeX + sx,     ySlab, edgeZ + sz,     Blocks.SMOOTH_STONE_SLAB);

        // 3) –°–≤–µ—Ç–æ–∫–∞–º–µ–Ω—å –ø–æ–¥ –ö–†–ê–ô–ù–ò–ú (–≤—Ç–æ—Ä—ã–º) –ø–æ–ª—É–±–ª–æ–∫–æ–º
        int gx = edgeX + sx, gz = edgeZ + sz, gy = ySlab - 1;
        if (gy >= worldMin && gy <= worldMax && gx >= minX && gx <= maxX && gz >= minZ && gz <= maxZ) {
            level.setBlock(new BlockPos(gx, gy, gz), Blocks.GLOWSTONE.defaultBlockState(), 3);
        }
    }

    private void placeBottomSlab(int x, int y, int z, Block slabBlock) {
        BlockState st = slabBlock.defaultBlockState();
        if (st.hasProperty(SlabBlock.TYPE)) {
            st = st.setValue(SlabBlock.TYPE, SlabType.BOTTOM);
        }
        level.setBlock(new BlockPos(x, y, z), st, 3);
    }

    // === –£–¢–ò–õ–ò–¢–´ / –§–ò–õ–¨–¢–†–´ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ RailGenerator, —á—Ç–æ–±—ã –±—ã–ª–æ 1-–≤-1) ===

    private static boolean isRailCandidate(JsonObject tags) {
        String r = optString(tags, "railway");
        if (r == null) return false;
        return r.equals("rail") || r.equals("tram") || r.equals("light_rail") || r.equals("subway");
    }

    private static boolean isBridge(JsonObject tags) {
        String v = optString(tags, "bridge");
        if (v == null) return false;
        v = v.trim().toLowerCase(Locale.ROOT);
        return !(v.equals("no") || v.equals("false") || v.equals("0"));
    }

    private static boolean isTunnel(JsonObject tags) {
        String v = optString(tags, "tunnel");
        if (v == null) return false;
        v = v.trim().toLowerCase(Locale.ROOT);
        return !(v.equals("no") || v.equals("false") || v.equals("0"));
    }

    private static String optString(JsonObject o, String k) {
        try { return o.has(k) && !o.get(k).isJsonNull() ? o.get(k).getAsString() : null; }
        catch (Throwable ignore) { return null; }
    }

    private static int[] latlngToBlock(double lat, double lng,
                                       double centerLat, double centerLng,
                                       double east, double west, double north, double south,
                                       int sizeMeters, int centerX, int centerZ) {
        double dx = (lng - centerLng) / (east - west) * sizeMeters;
        double dz = (lat - centerLat) / (south - north) * sizeMeters;
        int x = (int)Math.round(centerX + dx);
        int z = (int)Math.round(centerZ + dz);
        return new int[]{x, z};
    }

    private static List<int[]> bresenhamLine(int x0, int z0, int x1, int z1) {
        List<int[]> pts = new ArrayList<>();
        int dx = Math.abs(x1 - x0), dz = Math.abs(z1 - z0);
        int sx = x0 < x1 ? 1 : -1;
        int sz = z0 < z1 ? 1 : -1;
        int x = x0, z = z0;

        if (dx >= dz) {
            int err = dx / 2;
            while (x != x1) {
                pts.add(new int[]{x, z});
                err -= dz;
                if (err < 0) { z += sz; err += dx; }
                x += sx;
            }
        } else {
            int err = dz / 2;
            while (z != z1) {
                pts.add(new int[]{x, z});
                err -= dx;
                if (err < 0) { x += sx; err += dz; }
                z += sz;
            }
        }
        pts.add(new int[]{x1, z1});
        return pts;
    }

    private static boolean isUndergroundLike(JsonObject tags) {
        // tunnel=*, layer<0, level<0, location=underground/below_ground
        if (isTunnel(tags)) return true;
        String layer = optString(tags, "layer");
        if (layer != null && layer.matches(".*-\\d+.*")) return true;
        String level = optString(tags, "level");
        if (level != null && level.matches(".*-\\d+.*")) return true;
        String loc = optString(tags, "location");
        if (loc != null) {
            String l = loc.trim().toLowerCase(Locale.ROOT);
            if (l.contains("underground") || l.contains("below_ground")) return true;
        }
        return false;
    }

    private static boolean isElevatedLike(JsonObject tags) {
        // bridge-like –±–µ–∑ —è–≤–Ω–æ–≥–æ bridge: layer>0, level>0, bridge:structure=*, location=overground
        if (isBridge(tags)) return true;
        String layer = optString(tags, "layer");
        if (layer != null && layer.matches(".*\\b[1-9]\\d*.*")) return true;
        String level = optString(tags, "level");
        if (level != null && level.matches(".*\\b[1-9]\\d*.*")) return true;
        if (optString(tags, "bridge:structure") != null) return true;
        String loc = optString(tags, "location");
        if (loc != null && loc.trim().toLowerCase(Locale.ROOT).contains("overground")) return true;
        return false;
    }

    private int terrainYFromCoordsOrWorld(int x, int z, Integer hintY) {
        try {
            if (coords != null && coords.has("terrainGrid")) {
                JsonObject g = coords.getAsJsonObject("terrainGrid");
                int minX = g.get("minX").getAsInt();
                int minZ = g.get("minZ").getAsInt();
                int w    = g.get("width").getAsInt();
                int h    = g.get("height").getAsInt();
                int ix = x - minX, iz = z - minZ;
                if (ix >= 0 && ix < w && iz >= 0 && iz < h) {
                    JsonArray data = g.getAsJsonArray("data");
                    int idx = iz * w + ix;
                    return data.get(idx).getAsInt();
                }
            }
        } catch (Throwable ignore) {}
        // fallback (–Ω–∞ –≤—Å—è–∫–∏–π) ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        return findTopNonAirNearSkippingRails(x, z, hintY);
    }

    private static boolean isRailBlock(Block b) {
        return b == Blocks.RAIL || b == Blocks.POWERED_RAIL || b == Blocks.DETECTOR_RAIL || b == Blocks.ACTIVATOR_RAIL;
    }

    /** –í–µ—Ä—Ö–Ω–∏–π –Ω–µ-air, –Ω–æ —Ä–µ–ª—å—Å—ã —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –≤–æ–∑–¥—É—Ö (—á—Ç–æ–±—ã –±–∞–∑–∞ –Ω–µ ¬´–ª–µ–∑–ª–∞¬ª –Ω–∞ —Ä–µ–ª—å—Å). */
    private int findTopNonAirNearSkippingRails(int x, int z, Integer hintY) {
        final int worldMin = level.getMinBuildHeight();
        final int worldMax = level.getMaxBuildHeight() - 1;

        if (hintY != null) {
            int from = Math.min(worldMax, hintY + 16);
            int to   = Math.max(worldMin, hintY - 16);
            for (int y = from; y >= to; y--) {
                Block b = level.getBlockState(new BlockPos(x, y, z)).getBlock();
                if (!level.getBlockState(new BlockPos(x, y, z)).isAir() && !isRailBlock(b)) return y;
            }
        }
        for (int y = worldMax; y >= worldMin; y--) {
            Block b = level.getBlockState(new BlockPos(x, y, z)).getBlock();
            if (!level.getBlockState(new BlockPos(x, y, z)).isAir() && !isRailBlock(b)) return y;
        }
        return Integer.MIN_VALUE;
    }
}