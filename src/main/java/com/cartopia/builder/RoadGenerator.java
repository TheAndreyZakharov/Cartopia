package com.cartopia.builder;

import com.cartopia.store.FeatureStream;
import com.cartopia.store.GenerationStore;
import com.cartopia.store.TerrainGridStore;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import net.minecraft.core.BlockPos;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraftforge.registries.ForgeRegistries;

import java.util.*;

public class RoadGenerator {

    private final ServerLevel level;
    private final JsonObject coords;           // –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
    private final GenerationStore store;       // –ù–û–í–û–ï: —Å—Ç—Ä–∏–º —Ñ–∏—á –∏ –≥—Ä–∏–¥ —Ä–µ–ª—å–µ—Ñ–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å null)

    // –°–¢–ê–†–´–ô –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (fallback –Ω–∞ coords.features.elements).
    public RoadGenerator(ServerLevel level, JsonObject coords) {
        this(level, coords, null);
    }

    // –ù–û–í–´–ô –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ‚Äî –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ (–∏–∑ Pipeline –ø–µ—Ä–µ–¥–∞—ë–º store).
    public RoadGenerator(ServerLevel level, JsonObject coords, GenerationStore store) {
        this.level = level;
        this.coords = coords;
        this.store = store;
    }

    // --- —à–∏—Ä–æ–∫–æ–≤–µ—â–∞–ª–∫–∞ ---
    private static void broadcast(ServerLevel level, String msg) {
        try {
            if (level.getServer() != null) {
                for (ServerPlayer p : level.getServer().getPlayerList().getPlayers()) {
                    p.sendSystemMessage(Component.literal("[Cartopia] " + msg));
                }
            }
        } catch (Throwable ignore) {}
        System.out.println("[Cartopia] " + msg);
    }

    // === –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ—Ä–æ–≥ ===
    private static final class RoadStyle {
        final String blockId;
        final int width;
        RoadStyle(String vanillaName, int width) {
            this.blockId = "minecraft:" + vanillaName;
            this.width = Math.max(1, width);
        }
    }

    private static final Map<String, RoadStyle> ROAD_MATERIALS = new HashMap<>();
    static {
        ROAD_MATERIALS.put("motorway",     new RoadStyle("gray_concrete", 20));
        ROAD_MATERIALS.put("trunk",        new RoadStyle("gray_concrete", 15));
        ROAD_MATERIALS.put("primary",      new RoadStyle("gray_concrete", 15));
        ROAD_MATERIALS.put("secondary",    new RoadStyle("gray_concrete", 15));
        ROAD_MATERIALS.put("tertiary",     new RoadStyle("gray_concrete", 15));
        ROAD_MATERIALS.put("residential",  new RoadStyle("gray_concrete", 15));
        ROAD_MATERIALS.put("unclassified", new RoadStyle("gray_concrete", 6));
        ROAD_MATERIALS.put("service",      new RoadStyle("gray_concrete", 5));
        ROAD_MATERIALS.put("footway",      new RoadStyle("stone", 4));
        ROAD_MATERIALS.put("path",         new RoadStyle("stone", 4));
        ROAD_MATERIALS.put("cycleway",     new RoadStyle("stone", 4));
        ROAD_MATERIALS.put("pedestrian",   new RoadStyle("stone", 4));
        ROAD_MATERIALS.put("track",        new RoadStyle("cobblestone", 4));
        ROAD_MATERIALS.put("aeroway:runway",   new RoadStyle("gray_concrete", 45));
        ROAD_MATERIALS.put("aeroway:taxiway",  new RoadStyle("gray_concrete", 15));
        ROAD_MATERIALS.put("aeroway:taxilane", new RoadStyle("gray_concrete", 8));

        // rail –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, —Ç.–∫. railway –∏—Å–∫–ª—é—á–∞–µ–º.
        ROAD_MATERIALS.put("rail",         new RoadStyle("rail", 1));
    }

    // ==== –ø—É–±–ª–∏—á–Ω—ã–π –∑–∞–ø—É—Å–∫ ====
    public void generate() {
        broadcast(level, "üõ£Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Ä–æ–≥ (–±–µ–∑ –º–æ—Å—Ç–æ–≤/—Ç–æ–Ω–Ω–µ–ª–µ–π/–∂–¥)‚Ä¶");

        if (coords == null) {
            broadcast(level, "coords == null ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é RoadGenerator.");
            return;
        }

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–æ–ø—Ä–∏–≤—è–∑–∫–∏
        JsonObject center = coords.getAsJsonObject("center");
        JsonObject bbox   = coords.getAsJsonObject("bbox");
        if (center == null || bbox == null) {
            broadcast(level, "–ù–µ—Ç center/bbox –≤ coords ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –¥–æ—Ä–æ–≥–∏.");
            return;
        }

        final double centerLat = center.get("lat").getAsDouble();
        final double centerLng = center.get("lng").getAsDouble();
        final int    sizeMeters = coords.get("sizeMeters").getAsInt();

        final double south = bbox.get("south").getAsDouble();
        final double north = bbox.get("north").getAsDouble();
        final double west  = bbox.get("west").getAsDouble();
        final double east  = bbox.get("east").getAsDouble();

        final int centerX = coords.has("player")
                ? (int)Math.round(coords.getAsJsonObject("player").get("x").getAsDouble())
                : 0;
        final int centerZ = coords.has("player")
                ? (int)Math.round(coords.getAsJsonObject("player").get("z").getAsDouble())
                : 0;

        // –¢–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        int[] a = latlngToBlock(south, west, centerLat, centerLng, east, west, north, south, sizeMeters, centerX, centerZ);
        int[] b = latlngToBlock(north, east, centerLat, centerLng, east, west, north, south, sizeMeters, centerX, centerZ);
        final int minX = Math.min(a[0], b[0]);
        final int maxX = Math.max(a[0], b[0]);
        final int minZ = Math.min(a[1], b[1]);
        final int maxZ = Math.max(a[1], b[1]);

        // === –î–≤–∞ —Ä–µ–∂–∏–º–∞ —á—Ç–µ–Ω–∏—è —Ñ–∏—á:
        // 1) –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ: –ø–æ—Ç–æ–∫ –∏–∑ store.featureStream() (NDJSON, –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –û–ó–£).
        // 2) Fallback: —Å—Ç–∞—Ä—ã–π –º–∞—Å—Å–∏–≤ coords.features.elements (–µ—Å–ª–∏ store –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).
        boolean streaming = (store != null);
        if (!streaming) {
            if (!coords.has("features")) {
                broadcast(level, "–í coords –Ω–µ—Ç features ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é RoadGenerator.");
                return;
            }
            JsonObject features = coords.getAsJsonObject("features");
            JsonArray elements = features.getAsJsonArray("elements");
            if (elements == null || elements.size() == 0) {
                broadcast(level, "OSM elements –ø—É—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –¥–æ—Ä–æ–≥–∏.");
                return;
            }
            runWithJsonArray(elements, minX, maxX, minZ, maxZ,
                    centerLat, centerLng, east, west, north, south, sizeMeters, centerX, centerZ);
            return;
        }

        // === STREAM —Ä–µ–∂–∏–º (–¥–≤–æ–π–Ω–æ–π –ø—Ä–æ—Ö–æ–¥: –±—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á—ë—Ç, –∑–∞—Ç–µ–º —Ä–µ–Ω–¥–µ—Ä) ===
        int totalWays = 0;
        try (FeatureStream fs = store.featureStream()) {
            for (JsonObject e : fs) {
                JsonObject tags = (e.has("tags") && e.get("tags").isJsonObject()) ? e.getAsJsonObject("tags") : null;
                if (tags == null) continue;
                if (!isRoadCandidate(tags)) continue;
                if (!"way".equals(optString(e,"type"))) continue;
                if (!e.has("geometry") || !e.get("geometry").isJsonArray()) continue;
                if (e.getAsJsonArray("geometry").size() < 2) continue;
                totalWays++;
            }
        } catch (Exception ex) {  // <‚Äî –õ–û–í–ò–ú Exception, –∞ –Ω–µ IOException
            broadcast(level, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è features NDJSON (–ø–æ–¥—Å—á—ë—Ç): " + ex.getMessage() + " ‚Äî –ø–æ–ø—Ä–æ–±—É—é fallback –Ω–∞ coords.features.");
            JsonArray elements = coords.has("features") && coords.getAsJsonObject("features").has("elements")
                    ? coords.getAsJsonObject("features").getAsJsonArray("elements") : null;
            if (elements == null || elements.size() == 0) return;
            runWithJsonArray(elements, minX, maxX, minZ, maxZ,
                    centerLat, centerLng, east, west, north, south, sizeMeters, centerX, centerZ);
            return;
        }

        int processed = 0;
        try (FeatureStream fs = store.featureStream()) {
            for (JsonObject e : fs) {
                JsonObject tags = (e.has("tags") && e.get("tags").isJsonObject()) ? e.getAsJsonObject("tags") : null;
                if (tags == null) continue;

                if (!isRoadCandidate(tags)) continue;    // —Ç–æ–ª—å–∫–æ –¥–æ—Ä–æ–≥–∏
                if (isBridgeOrTunnel(tags)) continue;    // –∏—Å–∫–ª—é—á–∞–µ–º –º–æ—Å—Ç—ã/—Ç–æ–Ω–Ω–µ–ª–∏/—Å–ª–æ–∏
                if (!"way".equals(optString(e,"type"))) continue;

                JsonArray geom = e.getAsJsonArray("geometry");
                if (geom == null || geom.size() < 2) continue;

                String highway = optString(tags, "highway");
                String aeroway = optString(tags, "aeroway");
                String styleKey = (highway != null) ? highway
                        : (aeroway != null ? "aeroway:" + aeroway : "");
                RoadStyle style = ROAD_MATERIALS.getOrDefault(styleKey, new RoadStyle("stone", 4));


                int widthBlocks = widthFromTagsOrDefault(tags, style.width);
                Block roadBlock = resolveBlock(style.blockId);
                roadBlock = pickRoadBlockFromSurface(tags, roadBlock);

                // –ü–µ—Ä–µ–≤–æ–¥–∏–º lat/lon –≤ –±–ª–æ–∫–∏ –∏ –∫—Ä–∞—Å–∏–º —Å–µ–≥–º–µ–Ω—Ç—ã –ë—Ä–µ–∑–µ–Ω—Ö—ç–º–æ–º
                int prevX = Integer.MIN_VALUE, prevZ = Integer.MIN_VALUE;
                Integer lastYHint = null;
                for (int i=0; i<geom.size(); i++) {
                    JsonObject p = geom.get(i).getAsJsonObject();
                    double lat = p.get("lat").getAsDouble();
                    double lon = p.get("lon").getAsDouble();
                    int[] xz = latlngToBlock(lat, lon, centerLat, centerLng, east, west, north, south, sizeMeters, centerX, centerZ);
                    int x = xz[0], z = xz[1];

                    if (prevX != Integer.MIN_VALUE) {
                        paintSegment(prevX, prevZ, x, z, widthBlocks, roadBlock, lastYHint,
                                minX, maxX, minZ, maxZ);
                    }

                    prevX = x; prevZ = z;
                }

                processed++;
                if (totalWays > 0 && processed % Math.max(1, totalWays/10) == 0) {
                    int pct = (int)Math.round(100.0 * processed / Math.max(1,totalWays));
                    broadcast(level, "–î–æ—Ä–æ–≥–∏: ~" + pct + "%");
                }
            }
        } catch (Exception ex) {
            broadcast(level, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è features NDJSON (—Ä–µ–Ω–¥–µ—Ä): " + ex.getMessage());
        }

        broadcast(level, "–î–æ—Ä–æ–≥–∏ –≥–æ—Ç–æ–≤—ã.");
    }

    // === —Ä–µ–∂–∏–º —Å—Ç–∞—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ (fallback) ===
    private void runWithJsonArray(JsonArray elements,
                                  int minX, int maxX, int minZ, int maxZ,
                                  double centerLat, double centerLng,
                                  double east, double west, double north, double south,
                                  int sizeMeters, int centerX, int centerZ) {

        int totalWays = 0;
        for (JsonElement el : elements) {
            JsonObject e = el.getAsJsonObject();
            JsonObject tags = e.has("tags") && e.get("tags").isJsonObject() ? e.getAsJsonObject("tags") : null;
            if (tags == null) continue;
            if (!isRoadCandidate(tags)) continue;
            if (!"way".equals(optString(e,"type"))) continue;
            if (!e.has("geometry") || !e.get("geometry").isJsonArray()) continue;
            if (e.getAsJsonArray("geometry").size() < 2) continue;
            totalWays++;
        }

        int processed = 0;
        for (JsonElement el : elements) {
            JsonObject e = el.getAsJsonObject();
            JsonObject tags = e.has("tags") && e.get("tags").isJsonObject() ? e.getAsJsonObject("tags") : null;
            if (tags == null) continue;

            if (!isRoadCandidate(tags)) continue;            // —Ç–æ–ª—å–∫–æ –¥–æ—Ä–æ–≥–∏
            if (isBridgeOrTunnel(tags)) continue;            // –∏—Å–∫–ª—é—á–∞–µ–º –º–æ—Å—Ç—ã/—Ç–æ–Ω–Ω–µ–ª–∏/—Å–ª–æ–∏
            if (!"way".equals(optString(e,"type"))) continue;

            JsonArray geom = e.getAsJsonArray("geometry");
            if (geom == null || geom.size() < 2) continue;

            String highway = optString(tags, "highway");
            String aeroway = optString(tags, "aeroway");
            String styleKey = (highway != null) ? highway : (aeroway != null ? "aeroway:" + aeroway : "");
            RoadStyle style = ROAD_MATERIALS.getOrDefault(styleKey, new RoadStyle("stone", 4));

            int widthBlocks = widthFromTagsOrDefault(tags, style.width);
            Block roadBlock = resolveBlock(style.blockId);
            roadBlock = pickRoadBlockFromSurface(tags, roadBlock);

            int prevX = Integer.MIN_VALUE, prevZ = Integer.MIN_VALUE;
            Integer lastYHint = null;
            for (int i=0; i<geom.size(); i++) {
                JsonObject p = geom.get(i).getAsJsonObject();
                double lat = p.get("lat").getAsDouble();
                double lon = p.get("lon").getAsDouble();
                int[] xz = latlngToBlock(lat, lon, centerLat, centerLng, east, west, north, south, sizeMeters, centerX, centerZ);
                int x = xz[0], z = xz[1];

                if (prevX != Integer.MIN_VALUE) {
                    paintSegment(prevX, prevZ, x, z, widthBlocks, roadBlock, lastYHint,
                            minX, maxX, minZ, maxZ);
                }

                prevX = x; prevZ = z;
            }

            processed++;
            if (totalWays > 0 && processed % Math.max(1, totalWays/10) == 0) {
                int pct = (int)Math.round(100.0 * processed / Math.max(1,totalWays));
                broadcast(level, "–î–æ—Ä–æ–≥–∏: ~" + pct + "%");
            }
        }
    }

    // === –ª–æ–≥–∏–∫–∞ –æ—Ç–±–æ—Ä–∞ ===

    /** –¢–æ–ª—å–∫–æ –¥–æ—Ä–æ–≥–∏; –ù–ï –±—Ä–∞—Ç—å –∂/–¥; –ù–ï –±—Ä–∞—Ç—å waterway –∏ —Ç.–ø. */
    private static boolean isRoadCandidate(JsonObject tags) {
        boolean isHighway = tags.has("highway");
        String aeroway = optString(tags, "aeroway");
        boolean isAerowayLine = "runway".equals(aeroway)
                || "taxiway".equals(aeroway)
                || "taxilane".equals(aeroway);

        if (!(isHighway || isAerowayLine)) return false;
        if (tags.has("railway")) return false;
        if (tags.has("waterway") || tags.has("barrier")) return false;
        return true;
    }

    /** –ú–æ—Å—Ç—ã/—Ç–æ–Ω–Ω–µ–ª–∏/–Ω–µ–Ω—É–ª–µ–≤–æ–π layer ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é. */
    private static boolean isBridgeOrTunnel(JsonObject tags) {
        if (truthy(optString(tags, "bridge"))) return true;
        if (truthy(optString(tags, "tunnel"))) return true;
        try {
            String ls = optString(tags, "layer");
            if (ls != null && !ls.isBlank()) {
                int layer = Integer.parseInt(ls.trim());
                if (layer != 0) return true;
            }
        } catch (Exception ignore) {}
        return false;
    }

    // === –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ ===

    private void paintSegment(int x1, int z1, int x2, int z2, int width, Block roadBlock, Integer yHintStart,
                              int minX, int maxX, int minZ, int maxZ) {
        List<int[]> line = bresenhamLine(x1, z1, x2, z2);
        boolean horizontalMajor = Math.abs(x2 - x1) >= Math.abs(z2 - z1);
        int half = width / 2;

        Integer yHint = yHintStart;
        for (int[] pt : line) {
            int x = pt[0], z = pt[1];

            for (int w = -half; w <= half; w++) {
                int xx = horizontalMajor ? x : x + w;
                int zz = horizontalMajor ? z + w : z;

                // –∂—ë—Å—Ç–∫–∞—è –æ—Ç—Å–µ—á–∫–∞ –æ–±–ª–∞—Å—Ç–∏
                if (xx < minX || xx > maxX || zz < minZ || zz > maxZ) continue;

                int y = findTopYSmart(xx, zz, yHint); // –ù–û–í–û–ï: —Å–Ω–∞—á–∞–ª–∞ –≥—Ä–∏–¥, –ø–æ—Ç–æ–º fallback-—Å–∫–∞–Ω
                if (y == Integer.MIN_VALUE) continue;

                // –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–∑–±–µ–≥–∞—Ç—å –≤–æ–¥—ã –ø–æ –≥—Ä–∏–¥—É:
                // Integer wY = (store != null && store.grid != null) ? store.grid.waterY(xx, zz) : null;
                // if (wY != null && wY >= y) continue;

                @SuppressWarnings("unused")
                BlockState top = level.getBlockState(new BlockPos(xx, y, zz));
                // if (top.getBlock() == Blocks.WATER) continue;

                level.setBlock(new BlockPos(xx, y, zz), roadBlock.defaultBlockState(), 3);
                yHint = y;
            }
        }
    }

    // === –ø–æ–∏—Å–∫ –≤—ã—Å–æ—Ç—ã ===

    /** –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä—ë–º –≤—ã—Å–æ—Ç—É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∏–∑ TerrainGridStore, –∏–Ω–∞—á–µ —Å—Ç–∞—Ä—ã–π —Å–∫–∞–Ω –º–∏—Ä–∞. */
    private int findTopYSmart(int x, int z, Integer hintY) {
        if (store != null) {
            TerrainGridStore g = store.grid;
            if (g != null && g.inBounds(x, z)) {
                int gy = g.groundY(x, z);
                if (gy != Integer.MIN_VALUE) return gy;
            }
        }
        return findTopNonAirNear(x, z, hintY);
    }

    /** –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º —Å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π –≤—ã—Å–æ—Ç–æ–π; –∏–Ω–∞—á–µ —Ñ—É–ª–ª-—Å–∫–∞–Ω —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ */
    private int findTopNonAirNear(int x, int z, Integer hintY) {
        final int worldMin = level.getMinBuildHeight();
        final int worldMax = level.getMaxBuildHeight() - 1;

        if (hintY != null) {
            int from = Math.min(worldMax, hintY + 16);
            int to   = Math.max(worldMin, hintY - 16);
            for (int y = from; y >= to; y--) {
                if (!level.getBlockState(new BlockPos(x, y, z)).isAir()) return y;
            }
        }
        for (int y = worldMax; y >= worldMin; y--) {
            if (!level.getBlockState(new BlockPos(x, y, z)).isAir()) return y;
        }
        return Integer.MIN_VALUE;
    }

    // === —É—Ç–∏–ª–∏—Ç—ã ===

    private static Block resolveBlock(String id) {
        Block b = ForgeRegistries.BLOCKS.getValue(ResourceLocation.tryParse(id));
        return (b != null ? b : Blocks.STONE);
    }

    private static boolean truthy(String v) {
        if (v == null) return false;
        v = v.trim().toLowerCase(Locale.ROOT);
        return v.equals("yes") || v.equals("true") || v.equals("1");
    }

    private static String optString(JsonObject o, String k) {
        try { return o.has(k) && !o.get(k).isJsonNull() ? o.get(k).getAsString() : null; }
        catch (Throwable ignore) { return null; }
    }

    private static int[] latlngToBlock(double lat, double lng,
                                       double centerLat, double centerLng,
                                       double east, double west, double north, double south,
                                       int sizeMeters, int centerX, int centerZ) {
        double dx = (lng - centerLng) / (east - west) * sizeMeters;
        double dz = (lat - centerLat) / (south - north) * sizeMeters;
        int x = (int)Math.round(centerX + dx);
        int z = (int)Math.round(centerZ + dz);
        return new int[]{x, z};
    }

    private static List<int[]> bresenhamLine(int x0, int z0, int x1, int z1) {
        List<int[]> pts = new ArrayList<>();
        int dx = Math.abs(x1 - x0), dz = Math.abs(z1 - z0);
        int sx = x0 < x1 ? 1 : -1;
        int sz = z0 < z1 ? 1 : -1;
        int x = x0, z = z0;

        if (dx >= dz) {
            int err = dx / 2;
            while (x != x1) {
                pts.add(new int[]{x, z});
                err -= dz;
                if (err < 0) { z += sz; err += dx; }
                x += sx;
            }
        } else {
            int err = dz / 2;
            while (z != z1) {
                pts.add(new int[]{x, z});
                err -= dx;
                if (err < 0) { x += sx; err += dz; }
                z += sz;
            }
        }
        pts.add(new int[]{x1, z1});
        return pts;
    }

    /** width –∏–∑ —Ç–µ–≥–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å; –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç. –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö ‚âà –±–ª–æ–∫–∞–º –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º –º–∞—Å—à—Ç–∞–±–µ. */
    private static int widthFromTagsOrDefault(JsonObject tags, int def) {
        String[] keys = new String[] { "width:carriageway", "width", "est_width", "runway:width", "taxiway:width" };
        for (String k : keys) {
            String v = optString(tags, k);
            if (v == null) continue;
            v = v.trim().toLowerCase(Locale.ROOT).replace(',', '.');
            StringBuilder num = new StringBuilder();
            boolean dotSeen = false;
            for (char c : v.toCharArray()) {
                if (Character.isDigit(c)) num.append(c);
                else if (c=='.' && !dotSeen) { num.append('.'); dotSeen = true; }
            }
            if (num.length() == 0) continue;
            try {
                double meters = Double.parseDouble(num.toString());
                int blocks = (int)Math.round(meters); // 1 –º ‚âà 1 –±–ª–æ–∫ –ø–æ –Ω–∞—à–µ–π –ø—Ä–æ–µ–∫—Ü–∏–∏
                if (blocks >= 1) return blocks;
            } catch (Exception ignore) { }
        }
        return Math.max(1, def);
    }

    private Block pickRoadBlockFromSurface(JsonObject tags, Block fallback) {
        // —Å–º–æ—Ç—Ä–∏–º —è–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã/–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –¥–æ—Ä–æ–≥–∏
        String[] keys = new String[] { "surface", "material" };
        String val = null;
        for (String k : keys) {
            String v = optString(tags, k);
            if (v != null && !v.isBlank()) { val = v.trim().toLowerCase(Locale.ROOT); break; }
        }
        if (val == null) return fallback;

        // –¥–µ—Ä–µ–≤–æ -> –µ–ª–æ–≤—ã–µ –¥–æ—Å–∫–∏ (–∫–∞–∫ –≤ –º–æ—Å—Ç–∞—Ö)
        Set<String> WOODY = Set.of("wood","wooden","boards","board","boardwalk","planks","timber");
        for (String tok : val.split("[;,/\\s]+")) {
            if (WOODY.contains(tok)) return Blocks.SPRUCE_PLANKS;
        }

        // –º–µ—Ç–∞–ª–ª -> chiseled_stone_bricks
        Set<String> METALLIC = Set.of(
            "metal","metallic","steel","iron","metal_grid","metal_grate","grate","grating","grid",
            "chequer_plate","tread_plate",
            "–º–µ—Ç–∞–ª–ª","—Å—Ç–∞–ª—å","–∂–µ–ª–µ–∑–æ","—Ä–µ—à—ë—Ç–∫–∞","—Ä–µ—à–µ—Ç–∫–∞"
        );
        for (String tok : val.split("[;,/\\s]+")) {
            if (METALLIC.contains(tok)) return Blocks.CHISELED_STONE_BRICKS;
        }

        // –±—Ä—É—Å—á–∞—Ç–∫–∞  -> –±—É–ª—ã–∂–Ω–∏–∫
        Set<String> BRUSCHATKA = Set.of(
            // OSM-–∫–ª–∞—Å—Å–∏–∫–∞
            "sett","setts","stone_setts","granite_setts","basalt_setts","sandstone_setts",
            "paving_stones","paving-stones","paving_stone","paving-stone",
            "cobblestone","cobblestones","cobbled","cobbles","cobble",
            "cobblestone:flattened","unhewn_cobblestone",
            // —Ä—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "–±—Ä—É—Å—á–∞—Ç–∫–∞","–±—É–ª—ã–∂–Ω–∏–∫","–±—É–ª—ã–∂–Ω–∞—è","–±—É–ª—ã–∂–Ω–æ–µ","–±—É–ª—ã–∂–Ω–æ–π","–≥—Ä–∞–Ω–∏—Ç–Ω–∞—è_–±—Ä—É—Å—á–∞—Ç–∫–∞"
        );
        for (String tok : val.split("[;,/\\s]+")) {
            if (BRUSCHATKA.contains(tok)) return Blocks.COBBLESTONE;
        }

        return fallback; // –∏–Ω–∞—á–µ ‚Äî –∫–∞–∫ —Å–∫–∞–∑–∞–ª —Å—Ç–∏–ª—å –¥–æ—Ä–æ–≥–∏
    }

    // === –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ ===
    public static boolean hasRoadMaterial(String key) {
        return ROAD_MATERIALS.containsKey(key);
    }

    public static int getRoadWidth(String key) {
        RoadStyle style = ROAD_MATERIALS.get(key);
        return (style != null ? style.width : 12);
    }

}
