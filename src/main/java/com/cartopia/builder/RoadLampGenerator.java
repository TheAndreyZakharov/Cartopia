package com.cartopia.builder;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import net.minecraft.core.BlockPos;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.SlabBlock;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.properties.SlabType;
import net.minecraftforge.registries.ForgeRegistries;

import java.util.*;

public class RoadLampGenerator {

    // === –ü–ê–†–ê–ú–ï–¢–†–´ –õ–ê–ú–ü ===
    private static final int ROAD_LAMP_PERIOD = 20;          // —à–∞–≥ –ø–æ –¥–ª–∏–Ω–µ –¥–æ—Ä–æ–≥–∏
    private static final int ROAD_LAMP_COLUMN_WALLS = 5;     // –≤—ã—Å–æ—Ç–∞ –∫–æ–ª–æ–Ω–Ω—ã –∏–∑ —Å—Ç–µ–Ω
    private static final class Counter { int v = 0; }

    // –ß—Ç–æ–±—ã –ª–∞–º–ø—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∏—Å—å/–Ω–µ ¬´—Å–∞–¥–∏–ª–∏—Å—å¬ª –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞
    private final Set<Long> roadLampBases = new HashSet<>();
    private final Set<Long> placedByRoadLamps = new HashSet<>();

    private final ServerLevel level;
    private final JsonObject coords;

    public RoadLampGenerator(ServerLevel level, JsonObject coords) {
        this.level = level;
        this.coords = coords;
    }

    // --- —à–∏—Ä–æ–∫–æ–≤–µ—â–∞–ª–∫–∞ ---
    private static void broadcast(ServerLevel level, String msg) {
        try {
            if (level.getServer() != null) {
                for (ServerPlayer p : level.getServer().getPlayerList().getPlayers()) {
                    p.sendSystemMessage(Component.literal("[Cartopia] " + msg));
                }
            }
        } catch (Throwable ignore) {}
        System.out.println("[Cartopia] " + msg);
    }

    private static boolean isStone(Block b) {
        ResourceLocation key = ForgeRegistries.BLOCKS.getKey(b);
        return key != null && "minecraft:stone".equals(key.toString());
    }

    private static boolean isLampComponent(Block b) {
        ResourceLocation key = ForgeRegistries.BLOCKS.getKey(b);
        if (key == null) return false;
        String id = key.toString();
        return "minecraft:andesite_wall".equals(id)
            || "minecraft:smooth_stone_slab".equals(id)
            || "minecraft:glowstone".equals(id);
    }

    // === –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ—Ä–æ–≥ (–¢–û–ß–ù–û –∫–∞–∫ –≤ RoadGenerator) ===
    private static final class RoadStyle {
        final String blockId;
        final int width;
        RoadStyle(String vanillaName, int width) {
            this.blockId = "minecraft:" + vanillaName;
            this.width = Math.max(1, width);
        }
    }

    private static final Map<String, RoadStyle> ROAD_MATERIALS = new HashMap<>();
    static {
        ROAD_MATERIALS.put("motorway",     new RoadStyle("gray_concrete", 20));
        ROAD_MATERIALS.put("trunk",        new RoadStyle("gray_concrete", 15));
        ROAD_MATERIALS.put("primary",      new RoadStyle("gray_concrete", 15));
        ROAD_MATERIALS.put("secondary",    new RoadStyle("gray_concrete", 15));
        ROAD_MATERIALS.put("tertiary",     new RoadStyle("gray_concrete", 15));
        ROAD_MATERIALS.put("residential",  new RoadStyle("gray_concrete", 15));
        ROAD_MATERIALS.put("unclassified", new RoadStyle("stone", 6));
        ROAD_MATERIALS.put("service",      new RoadStyle("stone", 5));
        ROAD_MATERIALS.put("footway",      new RoadStyle("stone", 4));
        ROAD_MATERIALS.put("path",         new RoadStyle("stone", 4));
        ROAD_MATERIALS.put("cycleway",     new RoadStyle("stone", 4));
        ROAD_MATERIALS.put("pedestrian",   new RoadStyle("stone", 4));
        ROAD_MATERIALS.put("track",        new RoadStyle("cobblestone", 4));
        ROAD_MATERIALS.put("aeroway:runway",   new RoadStyle("gray_concrete", 45));
        ROAD_MATERIALS.put("aeroway:taxiway",  new RoadStyle("gray_concrete", 15));
        ROAD_MATERIALS.put("aeroway:taxilane", new RoadStyle("gray_concrete", 8));
        ROAD_MATERIALS.put("rail",         new RoadStyle("rail", 1)); // —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    }

    // –í—Å–µ –±–ª–æ–∫-id –ø–æ–ª–æ—Ç–Ω–∞ –¥–æ—Ä–æ–≥ (–Ω–∞ –Ω–∏—Ö –ª–∞–º–ø—ã –°–¢–†–û–ì–û –∑–∞–ø—Ä–µ—â–µ–Ω—ã)
    private static final Set<String> ROAD_BLOCK_IDS = new HashSet<>();
    static {
        for (RoadStyle s : ROAD_MATERIALS.values()) {
            ROAD_BLOCK_IDS.add(s.blockId);
        }
    }

    private static boolean isRoadLikeBlock(Block b) {
        ResourceLocation key = ForgeRegistries.BLOCKS.getKey(b);
        return key != null && ROAD_BLOCK_IDS.contains(key.toString());
    }

    // ==== –ü–£–ë–õ–ò–ß–ù–´–ô –ó–ê–ü–£–°–ö: –¢–û–õ–¨–ö–û –§–û–ù–ê–†–ò ====
    public void generate() {
        broadcast(level, "üí° –†–∞—Å—Å—Ç–∞–≤–ª—è—é –¥–æ—Ä–æ–∂–Ω—ã–µ —Ñ–æ–Ω–∞—Ä–∏ –≤–æ–∫—Ä—É–≥ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–æ—Ä–æ–≥‚Ä¶");

        if (coords == null || !coords.has("features")) {
            broadcast(level, "–í coords –Ω–µ—Ç features ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é RoadLampGenerator.");
            return;
        }

        // –ì–µ–æ–ø—Ä–∏–≤—è–∑–∫–∞ –∏ –≥—Ä–∞–Ω–∏—Ü—ã
        JsonObject center = coords.getAsJsonObject("center");
        JsonObject bbox   = coords.getAsJsonObject("bbox");

        final double centerLat = center.get("lat").getAsDouble();
        final double centerLng = center.get("lng").getAsDouble();
        final int    sizeMeters = coords.get("sizeMeters").getAsInt();

        final double south = bbox.get("south").getAsDouble();
        final double north = bbox.get("north").getAsDouble();
        final double west  = bbox.get("west").getAsDouble();
        final double east  = bbox.get("east").getAsDouble();

        final int centerX = coords.has("player")
                ? (int)Math.round(coords.getAsJsonObject("player").get("x").getAsDouble())
                : 0;
        final int centerZ = coords.has("player")
                ? (int)Math.round(coords.getAsJsonObject("player").get("z").getAsDouble())
                : 0;

        int[] a = latlngToBlock(south, west, centerLat, centerLng, east, west, north, south, sizeMeters, centerX, centerZ);
        int[] b = latlngToBlock(north, east, centerLat, centerLng, east, west, north, south, sizeMeters, centerX, centerZ);
        final int minX = Math.min(a[0], b[0]);
        final int maxX = Math.max(a[0], b[0]);
        final int minZ = Math.min(a[1], b[1]);
        final int maxZ = Math.max(a[1], b[1]);

        JsonArray elements = coords.getAsJsonObject("features").getAsJsonArray("elements");
        if (elements == null || elements.size() == 0) {
            broadcast(level, "OSM elements –ø—É—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —Ñ–æ–Ω–∞—Ä–∏.");
            return;
        }

        int totalWays = 0;
        for (JsonElement el : elements) {
            JsonObject e = el.getAsJsonObject();
            JsonObject tags = e.has("tags") && e.get("tags").isJsonObject() ? e.getAsJsonObject("tags") : null;
            if (tags == null) continue;
            if (!isRoadCandidate(tags)) continue;            // —Ç–æ–ª—å–∫–æ –ª–∏–Ω–∏–∏-–¥–æ—Ä–æ–≥–∏
            if (isBridgeOrTunnel(tags)) continue;            // –º–æ—Å—Ç—ã/—Ç–æ–Ω–Ω–µ–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if (!"way".equals(optString(e,"type"))) continue;
            if (!e.has("geometry") || !e.get("geometry").isJsonArray()) continue;
            if (e.getAsJsonArray("geometry").size() < 2) continue;
            totalWays++;
        }

        int processed = 0;
        for (JsonElement el : elements) {
            JsonObject e = el.getAsJsonObject();
            JsonObject tags = e.has("tags") && e.get("tags").isJsonObject() ? e.getAsJsonObject("tags") : null;
            if (tags == null) continue;

            if (!isRoadCandidate(tags)) continue;
            if (isBridgeOrTunnel(tags)) continue;
            if (!"way".equals(optString(e,"type"))) continue;

            JsonArray geom = e.getAsJsonArray("geometry");
            if (geom == null || geom.size() < 2) continue;

            String highway = optString(tags, "highway");
            String aeroway = optString(tags, "aeroway");
            String styleKey = (highway != null) ? highway
                            : (aeroway != null ? "aeroway:" + aeroway : "");
            RoadStyle style = ROAD_MATERIALS.getOrDefault(styleKey, new RoadStyle("stone", 4));

            int widthBlocks = widthFromTagsOrDefault(tags, style.width);

            // —Å—á—ë—Ç—á–∏–∫ –¥–ª—è —à–∞–≥–∞ –ª–∞–º–ø –ø–æ —ç—Ç–æ–π –¥–æ—Ä–æ–≥–µ
            Counter lamp = new Counter();

            int prevLX = Integer.MIN_VALUE, prevLZ = Integer.MIN_VALUE;
            Integer hint = null;
            for (int i=0; i<geom.size(); i++) {
                JsonObject p = geom.get(i).getAsJsonObject();
                double lat = p.get("lat").getAsDouble();
                double lon = p.get("lon").getAsDouble();
                int[] xz = latlngToBlock(lat, lon, centerLat, centerLng, east, west, north, south, sizeMeters, centerX, centerZ);
                int x = xz[0], z = xz[1];

                if (prevLX != Integer.MIN_VALUE) {
                    placeLampsAlongSegment(prevLX, prevLZ, x, z, widthBlocks, hint,
                            minX, maxX, minZ, maxZ, lamp);
                }
                prevLX = x; prevLZ = z;
            }

            processed++;
            if (totalWays > 0 && processed % Math.max(1, totalWays/10) == 0) {
                int pct = (int)Math.round(100.0 * processed / Math.max(1,totalWays));
                broadcast(level, "–§–æ–Ω–∞—Ä–∏ –≤–¥–æ–ª—å –¥–æ—Ä–æ–≥: ~" + pct + "%");
            }
        }

        broadcast(level, "–§–æ–Ω–∞—Ä–∏ –¥–ª—è –¥–æ—Ä–æ–≥ –≥–æ—Ç–æ–≤—ã.");
    }

    // === –û–¢–ë–û–† ===

    /** –¢–æ–ª—å–∫–æ –¥–æ—Ä–æ–≥–∏; –ù–ï –±—Ä–∞—Ç—å –∂/–¥; –ù–ï –±—Ä–∞—Ç—å waterway –∏ —Ç.–ø. */
    private static boolean isRoadCandidate(JsonObject tags) {
        boolean isHighway = tags.has("highway");
        String aeroway = optString(tags, "aeroway");
        boolean isAerowayLine = "runway".equals(aeroway)
                             || "taxiway".equals(aeroway)
                             || "taxilane".equals(aeroway);

        if (!(isHighway || isAerowayLine)) return false;
        if (tags.has("railway")) return false;
        if (tags.has("waterway") || tags.has("barrier")) return false;
        return true;
    }

    /** –ú–æ—Å—Ç—ã/—Ç–æ–Ω–Ω–µ–ª–∏/–Ω–µ–Ω—É–ª–µ–≤–æ–π layer ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é. */
    private static boolean isBridgeOrTunnel(JsonObject tags) {
        if (truthy(optString(tags, "bridge"))) return true;
        if (truthy(optString(tags, "tunnel"))) return true;
        try {
            String ls = optString(tags, "layer");
            if (ls != null && !ls.isBlank()) {
                int layer = Integer.parseInt(ls.trim());
                if (layer != 0) return true;
            }
        } catch (Exception ignore) {}
        return false;
    }

    // === –†–ê–°–°–¢–ê–ù–û–í–ö–ê –õ–ê–ú–ü –í–î–û–õ–¨ –°–ï–ì–ú–ï–ù–¢–ê (–†–û–í–ù–û –ö–ê–ö –£ –¢–ï–ë–Ø) ===
    private void placeLampsAlongSegment(int x1, int z1, int x2, int z2, int width, Integer yHintStart,
                                        int minX, int maxX, int minZ, int maxZ, Counter lamp) {
        List<int[]> line = bresenhamLine(x1, z1, x2, z2);
        boolean horizontalMajor = Math.abs(x2 - x1) >= Math.abs(z2 - z1);
        int half = Math.max(0, width / 2);

        Integer yHint = yHintStart;

        for (int[] pt : line) {
            int x = pt[0], z = pt[1];

            if (lamp.v % ROAD_LAMP_PERIOD == 0) {
                int off = Math.max(1, half + 1); // —Å—Ç—Ä–æ–≥–æ –∑–∞ –∫—Ä–æ–º–∫–æ–π –ø–æ–ª–æ—Ç–Ω–∞
                if (horizontalMajor) {
                    int lx1 = x,     lz1 = z - off; // toward +1 –∫ —Ü–µ–Ω—Ç—Ä—É
                    int lx2 = x,     lz2 = z + off; // toward -1 –∫ —Ü–µ–Ω—Ç—Ä—É
                    placeRoadLamp(lx1, lz1, yHint, true,  +1, minX, maxX, minZ, maxZ);
                    placeRoadLamp(lx2, lz2, yHint, true,  -1, minX, maxX, minZ, maxZ);
                } else {
                    int lx1 = x - off, lz1 = z;     // toward +1 –∫ —Ü–µ–Ω—Ç—Ä—É
                    int lx2 = x + off, lz2 = z;     // toward -1 –∫ —Ü–µ–Ω—Ç—Ä—É
                    placeRoadLamp(lx1, lz1, yHint, false, +1, minX, maxX, minZ, maxZ);
                    placeRoadLamp(lx2, lz2, yHint, false, -1, minX, maxX, minZ, maxZ);
                }
            }

            lamp.v++;
        }
    }

    // === –§–û–ù–ê–†–¨: –ö–û–õ–û–ù–ù–ê + 3 –ü–û–õ–£–ë–õ–û–ö–ê + GLOWSTONE (–¢–û–ß–ù–û –ö–ê–ö –°–ï–ô–ß–ê–°) ===
    /** –ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å —Ñ–æ–Ω–∞—Ä—å –Ω–∞ –±–µ–ª—ã–π/—Å–µ—Ä—ã–π/–∂—ë–ª—Ç—ã–π –±–µ—Ç–æ–Ω. */
    private static boolean isForbiddenConcrete(Block b) {
        ResourceLocation key = ForgeRegistries.BLOCKS.getKey(b);
        if (key == null) return false;
        String id = key.toString();
        return "minecraft:gray_concrete".equals(id)
            || "minecraft:white_concrete".equals(id)
            || "minecraft:yellow_concrete".equals(id);
    }

    /** –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—É–±–ª–æ–∫ –≤ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ–≤–∏–Ω–µ –±–ª–æ–∫–∞. */
    private void placeBottomSlab(int x, int y, int z, Block slabBlock) {
        BlockState st = slabBlock.defaultBlockState();
        if (st.hasProperty(SlabBlock.TYPE)) {
            st = st.setValue(SlabBlock.TYPE, SlabType.BOTTOM);
        }
        level.setBlock(new BlockPos(x, y, z), st, 3);
        placedByRoadLamps.add(BlockPos.asLong(x, y, z));
    }

    /** –í–µ—Ä—Ö–Ω–∏–π –Ω–µ-air, —Å—á–∏—Ç–∞—è –≤—Å–µ –±–ª–æ–∫–∏ –Ω–∞—à–∏—Ö –ª–∞–º–ø –∫–∞–∫ ¬´–≤–æ–∑–¥—É—Ö¬ª, —á—Ç–æ–±—ã –Ω–µ —Å—Ç–∞–≤–∏—Ç—å –ª–∞–º–ø—ã –Ω–∞ –ª–∞–º–ø—ã. */
    private int findTopNonAirNearSkippingRoadLamps(int x, int z, Integer hintY) {
        final int worldMin = level.getMinBuildHeight();
        final int worldMax = level.getMaxBuildHeight() - 1;

        // –ë—ã—Å—Ç—Ä—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –≤–æ–∫—Ä—É–≥ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if (hintY != null) {
            int from = Math.min(worldMax, hintY + 16);
            int to   = Math.max(worldMin, hintY - 16);
            for (int y = from; y >= to; y--) {
                BlockPos pos = new BlockPos(x, y, z);
                long key = BlockPos.asLong(x, y, z);

                // –°—á–∏—Ç–∞–µ–º –±–ª–æ–∫–∏ —Ñ–æ–Ω–∞—Ä—è –∫–∞–∫ ¬´–≤–æ–∑–¥—É—Ö¬ª ‚Äî –∏ —Å–≤–µ–∂–µ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ, –∏ –æ—Ç –ø—Ä–æ—à–ª—ã—Ö –ø—Ä–æ–≥–æ–Ω–æ–≤
                if (placedByRoadLamps.contains(key)) continue;
                Block block = level.getBlockState(pos).getBlock();
                if (isLampComponent(block)) continue;

                if (!level.getBlockState(pos).isAir()) return y;
            }
        }

        // –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ (–Ω–∞ –≤—Å—è–∫–∏–π)
        for (int y = worldMax; y >= worldMin; y--) {
            BlockPos pos = new BlockPos(x, y, z);
            long key = BlockPos.asLong(x, y, z);

            if (placedByRoadLamps.contains(key)) continue;
            Block block = level.getBlockState(pos).getBlock();
            if (isLampComponent(block)) continue;

            if (!level.getBlockState(pos).isAir()) return y;
        }
        return Integer.MIN_VALUE;
    }
    
    private void placeRoadLamp(int edgeX, int edgeZ, Integer hintY,
                               boolean horizontalMajor, int towardCenterSign,
                               int minX, int maxX, int minZ, int maxZ) {
        if (edgeX < minX || edgeX > maxX || edgeZ < minZ || edgeZ > maxZ) return;

        final int worldMin = level.getMinBuildHeight();
        final int worldMax = level.getMaxBuildHeight() - 1;

        // –ë–µ—Ä—ë–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª—å–µ—Ñ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞–Ω–µ–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∞–º–ø—ã
        int ySurfEdge = findTopNonAirNearSkippingRoadLamps(edgeX, edgeZ, hintY);
        if (ySurfEdge == Integer.MIN_VALUE) return;

        // === –ù–û–í–û–ï: —Å—Ç—Ä–æ–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–ª—å–µ—Ñ–µ (groundY) –∏ —Å—Ç—Ä–æ–≥–æ –Ω–∞ –≤—ã—Å–æ—Ç–µ groundY+1 ===
        Integer gridY = terrainGroundYFromGrid(edgeX, edgeZ);
        if (gridY == null) return;              // –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ª—å–µ—Ñ–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ç–∞–≤–∏–º (—Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º)
        if (isWaterCell(edgeX, edgeZ)) return;  // –≤–æ–¥–∞ –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è
        if (ySurfEdge != gridY) return;         // –≤–µ—Ä—Ö–Ω–∏–π –Ω–µ–ø—É—Å—Ç–æ–π –±–ª–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–ª —Å –≤—ã—Å–æ—Ç–æ–π —Ä–µ–ª—å–µ—Ñ–∞ ‚Üí –Ω–µ —Å—Ç–∞–≤–∏–º —Ñ–æ–Ω–∞—Ä—å

        // –ù–ò–ö–û–ì–î–ê –Ω–µ —Å—Ç–∞–≤–∏–º –Ω–∞ –¥–æ—Ä–æ–∂–Ω–æ–µ –ø–æ–ª–æ—Ç–Ω–æ –∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –±–µ—Ç–æ–Ω—ã
        Block under = level.getBlockState(new BlockPos(edgeX, gridY, edgeZ)).getBlock();
        // —Å—Ç–∞–ª–æ: –µ—Å–ª–∏ —ç—Ç–æ –¥–æ—Ä–æ–∂–Ω–æ–µ –ø–æ–ª–æ—Ç–Ω–æ ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º, –ö–†–û–ú–ï —Å–ª—É—á–∞—è –∫–∞–º–Ω—è;
        // –±–µ—Ç–æ–Ω—ã –∏–∑ isForbiddenConcrete –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ–ª—å–∑—è.
        if ((isRoadLikeBlock(under) && !isStone(under)) || isForbiddenConcrete(under)) return;

        // –ë–∞–∑–∞ –∫–æ–ª–æ–Ω–Ω—ã
        int y0 = gridY + 1; // —Å—Ç—Ä–æ–≥–æ –Ω–∞ –≤—ã—Å–æ—Ç—É —Ä–µ–ª—å–µ—Ñ–∞ + 1
        if (y0 > worldMax) return;

        // –ï—Å–ª–∏ –≤ –±–∞–∑–µ —É–∂–µ —á—Ç–æ-—Ç–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∞–º–ø–æ–π —Ä–∞–Ω—å—à–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        long baseKey = BlockPos.asLong(edgeX, y0, edgeZ);
        if (roadLampBases.contains(baseKey)) return;

        // –ï—Å–ª–∏ –±–∞–∑–∞ –ù–ï –≤–æ–∑–¥—É—Ö ‚Äî –Ω–µ —Å—Ç–∞–≤–∏–º, —á—Ç–æ–±—ã –Ω–µ ¬´—Å–∞–¥–∏—Ç—å—Å—è¬ª —Å–≤–µ—Ä—Ö—É
        if (!level.getBlockState(new BlockPos(edgeX, y0, edgeZ)).isAir()) return;


        // –í–µ—Ä—Ö –∫–æ–ª–æ–Ω–Ω—ã
        int yTop = Math.min(y0 + ROAD_LAMP_COLUMN_WALLS - 1, worldMax);

        // –ü–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö –±—É–¥—É—â–∏—Ö –±–ª–æ–∫–æ–≤ —Ñ–æ–Ω–∞—Ä—è
        int ySlab = yTop + 1;
        if (ySlab > worldMax) return;

        int sx = horizontalMajor ? 0 : towardCenterSign;
        int sz = horizontalMajor ? towardCenterSign : 0;

        int gx = edgeX + 2 * sx;
        int gz = edgeZ + 2 * sz;
        int gy = ySlab - 1;

        // === –ü–†–ï–î–û–•–†–ê–ù–ò–¢–ï–õ–¨ –û–¢ –ü–ï–†–ï–ó–ê–ü–ò–°–ò ***–õ–Æ–ë–´–•*** –ë–õ–û–ö–û–í ===
        // 1) –í—Å—è –∫–æ–ª–æ–Ω–Ω–∞ (edgeX, y0..yTop, edgeZ) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–æ–∑–¥—É—Ö–æ–º
        for (int y = y0; y <= yTop; y++) {
            if (!level.getBlockState(new BlockPos(edgeX, y, edgeZ)).isAir()) return;
        }
        // 2) –í—Å–µ —Ç—Ä–∏ –ø–ª–∏—Ç—ã (–Ω–∞ —É—Ä–æ–≤–Ω–µ ySlab) ‚Äî —Ç–æ–ª—å–∫–æ –≤–æ–∑–¥—É—Ö –ø–æ–¥ –∑–∞–º–µ–Ω—É
        if (!level.getBlockState(new BlockPos(edgeX,                 ySlab, edgeZ                )).isAir()) return;
        if (!level.getBlockState(new BlockPos(edgeX + 1 * sx,        ySlab, edgeZ + 1 * sz       )).isAir()) return;
        if (!level.getBlockState(new BlockPos(edgeX + 2 * sx,        ySlab, edgeZ + 2 * sz       )).isAir()) return;
        // 3) –°–≤–µ—Ç–æ–∫–∞–º–µ–Ω—å: –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –º–∏—Ä–∞/–≥—Ä–∞–Ω–∏—Ü ‚Äî —Ç–∞–º —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ–∑–¥—É—Ö
        if (gy >= worldMin && gy <= worldMax && gx >= minX && gx <= maxX && gz >= minZ && gz <= maxZ) {
            if (!level.getBlockState(new BlockPos(gx, gy, gz)).isAir()) return;
        }

        for (int y = y0; y <= yTop; y++) {
            BlockPos pos = new BlockPos(edgeX, y, edgeZ);
            level.setBlock(pos, Blocks.ANDESITE_WALL.defaultBlockState(), 3);
            placedByRoadLamps.add(BlockPos.asLong(edgeX, y, edgeZ));
        }



        placeBottomSlab(edgeX,              ySlab, edgeZ,              Blocks.SMOOTH_STONE_SLAB);
        placeBottomSlab(edgeX + 1 * sx,     ySlab, edgeZ + 1 * sz,     Blocks.SMOOTH_STONE_SLAB);
        placeBottomSlab(edgeX + 2 * sx,     ySlab, edgeZ + 2 * sz,     Blocks.SMOOTH_STONE_SLAB);

        // –°–≤–µ—Ç–æ–∫–∞–º–µ–Ω—å –ø–æ–¥ –∫—Ä–∞–π–Ω–∏–º –ø–æ–ª—É–±–ª–æ–∫–æ–º

        if (gy >= worldMin && gy <= worldMax && gx >= minX && gx <= maxX && gz >= minZ && gz <= maxZ) {
            BlockPos gpos = new BlockPos(gx, gy, gz);
            level.setBlock(gpos, Blocks.GLOWSTONE.defaultBlockState(), 3);
            placedByRoadLamps.add(BlockPos.asLong(gx, gy, gz));
        }

        // –ø–æ–º–µ—á–∞–µ–º –±–∞–∑—É, —á—Ç–æ–±—ã –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ –ª–∞–º–ø—É –Ω–µ —Å—Ç–∞–≤–∏—Ç—å
        roadLampBases.add(baseKey);
    }

    // === –£–¢–ò–õ–ò–¢–´ ===

    private static boolean truthy(String v) {
        if (v == null) return false;
        v = v.trim().toLowerCase(Locale.ROOT);
        return v.equals("yes") || v.equals("true") || v.equals("1");
    }

    private static String optString(JsonObject o, String k) {
        try { return o.has(k) && !o.get(k).isJsonNull() ? o.get(k).getAsString() : null; }
        catch (Throwable ignore) { return null; }
    }

    private static int[] latlngToBlock(double lat, double lng,
                                       double centerLat, double centerLng,
                                       double east, double west, double north, double south,
                                       int sizeMeters, int centerX, int centerZ) {
        double dx = (lng - centerLng) / (east - west) * sizeMeters;
        double dz = (lat - centerLat) / (south - north) * sizeMeters;
        int x = (int)Math.round(centerX + dx);
        int z = (int)Math.round(centerZ + dz);
        return new int[]{x, z};
    }

    private static List<int[]> bresenhamLine(int x0, int z0, int x1, int z1) {
        List<int[]> pts = new ArrayList<>();
        int dx = Math.abs(x1 - x0), dz = Math.abs(z1 - z0);
        int sx = x0 < x1 ? 1 : -1;
        int sz = z0 < z1 ? 1 : -1;
        int x = x0, z = z0;

        if (dx >= dz) {
            int err = dx / 2;
            while (x != x1) {
                pts.add(new int[]{x, z});
                err -= dz;
                if (err < 0) { z += sz; err += dx; }
                x += sx;
            }
        } else {
            int err = dz / 2;
            while (z != z1) {
                pts.add(new int[]{x, z});
                err -= dx;
                if (err < 0) { x += sx; err += dz; }
                z += sz;
            }
        }
        pts.add(new int[]{x1, z1});
        return pts;
    }

    /** width –∏–∑ —Ç–µ–≥–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å; –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç. –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö ‚âà –±–ª–æ–∫–∞–º –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º –º–∞—Å—à—Ç–∞–±–µ. */
    private static int widthFromTagsOrDefault(JsonObject tags, int def) {
        String[] keys = new String[] { "width:carriageway", "width", "est_width", "runway:width", "taxiway:width" };
        for (String k : keys) {
            String v = optString(tags, k);
            if (v == null) continue;
            v = v.trim().toLowerCase(Locale.ROOT).replace(',', '.');
            StringBuilder num = new StringBuilder();
            boolean dotSeen = false;
            for (char c : v.toCharArray()) {
                if (Character.isDigit(c)) num.append(c);
                else if (c=='.' && !dotSeen) { num.append('.'); dotSeen = true; }
            }
            if (num.length() == 0) continue;
            try {
                double meters = Double.parseDouble(num.toString());
                int blocks = (int)Math.round(meters); // 1 –º ‚âà 1 –±–ª–æ–∫
                if (blocks >= 1) return blocks;
            } catch (Exception ignore) { }
        }
        return Math.max(1, def);
    }

    // === TERRAIN GRID (–∏–∑ SurfaceGenerator) ===
    // –í–µ—Ä–Ω—ë—Ç –≤—ã—Å–æ—Ç—É —Ä–µ–ª—å–µ—Ñ–∞ groundY –∏–∑ coords. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç v1 (data[]) –∏ v2 (grids.groundY[]).
    private Integer terrainGroundYFromGrid(int x, int z) {
        try {
            if (coords == null || !coords.has("terrainGrid")) return null;
            JsonObject tg = coords.getAsJsonObject("terrainGrid");
            if (tg == null) return null;

            int minX = tg.get("minX").getAsInt();
            int minZ = tg.get("minZ").getAsInt();
            int width = tg.get("width").getAsInt();
            int idx = (z - minZ) * width + (x - minX);
            if (idx < 0) return null;

            if (tg.has("grids") && tg.get("grids").isJsonObject()) {
                JsonObject grids = tg.getAsJsonObject("grids");
                if (!grids.has("groundY")) return null;
                JsonArray groundY = grids.getAsJsonArray("groundY");
                if (idx >= groundY.size()) return null;
                return groundY.get(idx).getAsInt();
            }

            // v1 fallback: terrainGrid.data[]
            if (tg.has("data") && tg.get("data").isJsonArray()) {
                JsonArray data = tg.getAsJsonArray("data");
                if (idx >= data.size()) return null;
                return data.get(idx).getAsInt();
            }
        } catch (Throwable ignore) {}
        return null;
    }

    // true –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ ‚Äî –≤–æ–¥–∞ (–ø–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É terrain-grid: waterY!=null –∏–ª–∏ topBlock=="minecraft:water")
    private boolean isWaterCell(int x, int z) {
        try {
            if (coords == null || !coords.has("terrainGrid")) return false;
            JsonObject tg = coords.getAsJsonObject("terrainGrid");
            int minX = tg.get("minX").getAsInt();
            int minZ = tg.get("minZ").getAsInt();
            int width = tg.get("width").getAsInt();
            int idx = (z - minZ) * width + (x - minX);
            if (idx < 0) return false;

            if (tg.has("grids") && tg.get("grids").isJsonObject()) {
                JsonObject grids = tg.getAsJsonObject("grids");
                if (grids.has("waterY")) {
                    JsonArray waterY = grids.getAsJsonArray("waterY");
                    if (idx >= waterY.size()) return false;
                    return !waterY.get(idx).isJsonNull();
                }
                if (grids.has("topBlock")) {
                    JsonArray tb = grids.getAsJsonArray("topBlock");
                    if (idx >= tb.size()) return false;
                    return "minecraft:water".equals(tb.get(idx).getAsString());
                }
            }
        } catch (Throwable ignore) {}
        return false;
    }
}