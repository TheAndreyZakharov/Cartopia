const express = require('express');
const fs = require('fs');
const path = require('path');
const cors = require('cors');
const { exec } = require('child_process');
const { pipeline } = require('stream/promises');

// –ü–∞—É–∑–∞
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

// --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ DEM —Å GMRT ---
async function downloadGmrtDemWithRetry(bbox, outFile, maxRetries = 10, delayMs = 60000) {
  const downloadGmrtDem = async () => {
    const params = new URLSearchParams({
      minlatitude: bbox.south,
      maxlatitude: bbox.north,
      minlongitude: bbox.west,
      maxlongitude: bbox.east,
      format: 'geotiff',
      layer: 'topo'
    });
    const url = `https://www.gmrt.org/services/GridServer?${params.toString()}`;
    console.log('‚¨áÔ∏è GMRT DEM URL:', url);

    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; CartopiaBot/1.0; +https://your.site)'
      }
    });

    if (!response.ok) {
      const errText = await response.text();
      fs.writeFileSync(outFile + '.error.html', errText);
      throw new Error(`–û—à–∏–±–∫–∞ GMRT: ${response.statusText}, details: ${errText.slice(0, 200)}`);
    }

    const nodeReadable = require('stream').Readable.fromWeb(response.body);
    await pipeline(
      nodeReadable,
      fs.createWriteStream(outFile)
    );
  };

  let attempt = 0;
  while (attempt < maxRetries) {
    attempt++;
    try {
      await downloadGmrtDem();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
      const stat = fs.statSync(outFile);
      if (stat.size === 0) {
        console.log(`‚ùå DEM –ø—É—Å—Ç–æ–π (0 –±–∞–π—Ç), –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}. –ñ–¥—ë–º...`);
        await sleep(delayMs);
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª ‚Äî –∏–º–µ–Ω–Ω–æ GeoTIFF (TIFF –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å II* –∏–ª–∏ MM*)
      const buffer = fs.readFileSync(outFile);
      const isTiff =
        (buffer[0] === 0x49 && buffer[1] === 0x49 && buffer[2] === 0x2A && buffer[3] === 0x00) ||
        (buffer[0] === 0x4D && buffer[1] === 0x4D && buffer[2] === 0x00 && buffer[3] === 0x2A);

      const firstBytes = buffer.slice(0, 100).toString('utf8');
      if (!isTiff || firstBytes.startsWith('<') || firstBytes.toLowerCase().includes('html')) {
        fs.writeFileSync(outFile + '.error.html', buffer);
        console.log(`‚ùå DEM –Ω–µ GeoTIFF (–∏–ª–∏ –æ—à–∏–±–∫–∞/HTML). –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}. –ñ–¥—ë–º...`);
        await sleep(delayMs);
        continue;
      }

      console.log('‚úÖ DEM —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!');
      return;
    } catch (err) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è DEM, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}:`, err.message);
      await sleep(delayMs);
    }
  }
  throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å DEM –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫');
}



const app = express();
const PORT = 4567;

let playerCoords = null;

app.use(express.json({ limit: '200mb' }));
app.use(cors());
app.use(express.static(path.join(__dirname, 'public')));

app.post('/player', (req, res) => {
  playerCoords = req.body;
  res.send("OK");
});

app.post('/save-coords', async (req, res) => {
  const data = req.body;
  if (playerCoords) data.player = playerCoords;

  const filePath = path.join(__dirname, 'coords.json');
  const demPath = path.join(__dirname, 'dem.tif');
  const bbox = data.bbox;

  if (
    Math.abs(bbox.north - bbox.south) > 20 ||
    Math.abs(bbox.east - bbox.west) > 20
  ) {
    return res.status(400).send('–û–±–ª–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª—è GMRT (–º–∞–∫—Å–∏–º—É–º 20x20 –≥—Ä–∞–¥—É—Å–æ–≤)');
  }

  fs.writeFileSync(filePath, JSON.stringify(data, null, 2));

  try {
    await downloadGmrtDemWithRetry(bbox, demPath, 10, 60000);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
    return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ DEM');
  }

  // –í—Å—ë —Å–∫–∞—á–∞–Ω–æ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º generate_world.py
  exec('python3 generate_world.py', { maxBuffer: 1024 * 1024 * 10 }, (error, stdout, stderr) => {
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
      console.error(stderr);
    } else {
      console.log(stdout);
    }
  });

  res.send('OK');
});

app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
});
